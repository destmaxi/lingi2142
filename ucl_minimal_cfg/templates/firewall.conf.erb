#!/bin/bash

# Begin by flushing any default rules to create them from scratch:
ip6tables -F INPUT
ip6tables -F OUTPUT
ip6tables -F FORWARD
ip6tables -F

# We use a whitlisting policy so we only allow packets that match precise rules and we drop
# anything else, in INPUT/FORWARD/OUTPUT
ip6tables -P INPUT DROP
ip6tables -P FORWARD DROP
ip6tables -P OUTPUT DROP

# Allow packets coming from related and established connections
ip6tables -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT
ip6tables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
ip6tables -A OUTPUT  -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allow loopback
ip6tables -A INPUT -i lo -j ACCEPT
ip6tables -A OUPUT -o lo -j ACCEPT

# Drop invalid packets
ip6tables -A INPUT   -m state --state INVALID -j DROP
ip6tables -A FORWARD -m state --state INVALID -j DROP
ip6tables -A OUTPUT  -m state --state INVALID -j DROP

<% if @type == "border" %>
# Border router: block incomming packets that have a source ip from our network (spoofed source ip).
ip6tables -A INPUT   -i <%= @interface %> -s <%= @prefix_a %>::/52 -j DROP -m comment --comment "incomming packet with source ip from our network"
ip6tables -A INPUT   -i <%= @interface %> -s <%= @prefix_b %>::/52 -j DROP -m comment --comment "incomming packet with source ip from our network"
ip6tables -A FORWARD -i <%= @interface %> -s <%= @prefix_a %>::/52 -j DROP -m comment --comment "forwarding packet with source ip from our network"
ip6tables -A FORWARD -i <%= @interface %> -s <%= @prefix_b %>::/52 -j DROP -m comment --comment "forwarding packet with source ip from our network"

# Block ospf (in both direction) on interface $interface as we should not receive such
# packet from internet and it permits to avoid by error to send or ospf packet to the internet.
ip6tables -A INPUT   -i <%= @interface %> -p ospf -j DROP -m comment --comment "block incomming ospf packets"
ip6tables -A FORWARD -i <%= @interface %> -p ospf -j DROP -m comment --comment "block incomming forwarding ospf packets"
ip6tables -A FORWARD -o <%= @interface %> -p ospf -j DROP -m comment --comment "block outgoing forwarding ospf packets"
ip6tables -A OUTPUT  -o <%= @interface %> -p ospf -j DROP -m comment --comment "block outgoing ospf packets"

# Block dhcp from leaving our network
ip6tables -A INPUT   -p udp -i <%= @interface %> -m multiport --dports 546,547 -j DROP
ip6tables -A FORWARD -p udp -i <%= @interface %> -m multiport --dports 546,547 -j DROP
ip6tables -A FORWARD -p udp -o <%= @interface %> -m multiport --dports 546,547 -j DROP
ip6tables -A OUTPUT  -p udp -o <%= @interface %> -m multiport --dports 546,547 -j DROP

# This router is a 'border router': there is a BGP session running on the interface.
# We block hop limit exceeded towards outside network (rule against topology discovery with traceroute)
ip6tables -A OUTPUT  -o <%= @interface %> -p icmpv6 --icmpv6-type time-exceeded -j DROP
ip6tables -A FORWARD -o <%= @interface %> -p icmpv6 --icmpv6-type time-exceeded -j DROP

# Allow bgp on this border router on the interface where bgp should be enabled
ip6tables -A INPUT  -i <%= @interface %> -p tcp --dport 179 -j ACCEPT
ip6tables -A OUTPUT -o <%= @interface %> -p tcp --dport 179 -j ACCEPT
<%- end -%>

# TODO: Allow dhcp packets

# Allow ospf
ip6tables -A INPUT   -p ospf -j ACCEPT
ip6tables -A FORWARD -p ospf -j ACCEPT
ip6tables -A OUTPUT   -p ospf -j ACCEPT

# Accept icmpv6 when it comes from our network
ip6tables -A INPUT -p icmpv6 -j ACCEPT
ip6tables -A FORWARD -p icmpv6 -j ACCEPT
<%- if @type == "border" -%>
# Don't allow forwarding of pings, only border routers can be pinged
ip6tables -A FORWARD -p icmpv6 -i <%= @interface %> -j DROP
<%- end -%>
ip6tables -A OUTPUT -p icmpv6 -j ACCEPT

# Log the dropped packets !
ip6tables -A INPUT -j NFLOG --nflog-prefix "[DROP-INPUT]<%= @router_name %>"
ip6tables -A FORWARD -j NFLOG --nflog-prefix "[DROP-FORWARD]<%= @router_name %>"
ip6tables -A OUTPUT -j NFLOG --nflog-prefix "[DROP-OUTPUT]<%= @router_name %>"
